Tennie White
PLP 5
CS330
2/24/2025
PHP Language and OOP 
Reflecting on my experience with PHP, particularly when working with classes like Person, Student, and Test, I've gathered insights into PHP's object-oriented programming (OOP) features. Here's what I've learned:

1. Does PHP Support Objects or Something Similar?
Yes, PHP fully supports object-oriented programming. Starting from PHP 5, the language introduced comprehensive OOP features, allowing developers to define classes, create objects, 

and utilize principles like inheritance, encapsulation, and polymorphism. This evolution has enabled the development of robust and maintainable code structures.
PHP uses classes to define objects that can have:
     Attributes (also called properties) that hold data related to the object.
     Methods (also called functions) that define the behavior of the object.
In my experience, working with PHP classes is straightforward once the fundamental concepts are understood. For example, defining a class Person with attributes like $firstName,
$lastName, and $age allowed me to encapsulate data neatly. I could then extend this class with Student, inheriting its properties while adding new attributes like $studentID and $major.

1a. Naming Conventions in PHP
In PHP, adhering to consistent naming conventions enhances code readability and maintainability. Common practices include:
Classes: Named using StudlyCaps (also known as PascalCase), where each word starts with an uppercase letter, e.g., Person, Student.
Methods and Functions: Named using camelCase, where the first word is lowercase, and each subsequent word starts with an uppercase letter, e.g., displayPersonInfo(), getFullName().
Properties (Instance Variables): Typically use camelCase, aligning with method naming for consistency.
These conventions are widely adopted in the PHP community and are recommended for maintaining a uniform coding style. I found this approach especially useful when switching between
different classes and methods because the consistent naming pattern made the code easier to read and understand.



2. Standard Methods for Functions Across Objects
PHP offers "magic methods," which are special functions that provide standardized behavior across classes. For instance, the __construct() method serves as a constructor, initializing new objects.
While PHP doesn't have a direct equivalent to Java's toString() method, you can define a __toString() method in your class to specify how an object should be represented as a string.
Implementing this method allows objects to be treated as strings, facilitating easier debugging and display.
Example:
public function __toString() {
    return $this->getFullName() . ", Age: " . $this->age;
}
This method can be used as follows:
echo $person;
In my implementation, using __toString() was especially helpful when I wanted to quickly check the state of an object by echoing it directly. This made debugging more efficient, as I could see
the object properties in a human-readable format.
 
3. How Does Inheritance Work in PHP? Does PHP Support Multiple Inheritance?
Inheritance in PHP allows a class to inherit properties and methods from another class using the extends keyword. This promotes code reuse and establishes a hierarchical relationship between classes. 
In my project, I used this to create a Student class that extended Person, inheriting its properties while adding new ones like $studentID and $major.
Example:
class Student extends Person {
    public $studentID;
    public $major;
}
However, PHP does not support multiple inheritance (i.e., a class cannot inherit from multiple classes). To address this limitation, PHP introduces "traits," which are reusable code blocks 
that can be included within multiple classes, enabling the sharing of methods across different class hierarchies without traditional inheritance.
Example:
trait CommonMethods {
    public function commonFunction() {
        echo "This is a common function.";
    }
}

class Student extends Person {
    use CommonMethods;
}
Using traits helped me overcome the limitations of single inheritance while maintaining cleaner code. I used a trait to share a common method across multiple classes without duplicating code,
which significantly reduced maintenance overhead.

4. Method Overloading and Call Resolution
PHP's approach to overloading differs from languages like Java or C++. In PHP, traditional method overloading (multiple methods with the same name but different parameters) isn't supported. 
Instead, PHP provides the __call() magic method, which handles calls to undefined methods.
Example:
public function __call($name, $arguments) {
    echo "Calling method '$name' with arguments: ". implode(', ', $arguments);
}
This method receives the name of the method being called and an array of arguments, allowing for flexible handling of various method calls. I used call() in my project to simulate method overloading,
which allowed me to handle dynamic method calls more gracefully.
 
5. Additional Considerations with Objects and Inheritance
Visibility: PHP supports access modifiers, public, protected, and private, to control the visibility of class properties and methods. Understanding and appropriately using these modifiers is crucial
for encapsulation and protecting the internal state of objects.
Abstract Classes and Interfaces: PHP allows the definition of abstract classes (classes that cannot be instantiated on their own) and interfaces (which define method signatures without implementations).
These features are instrumental in designing flexible and extensible code architectures.
Constructor Behavior: PHP's __construct() method serves as the constructor for a class. When a subclass inherits from a parent class, it can override the parent's constructor. If the subclass doesn't 
define its own constructor, the parent's constructor (if defined) will be invoked automatically. This behavior ensures proper initialization of objects in an inheritance chain.
During my project, I found the visibility modifiers extremely useful in encapsulating class data and preventing unintended access or modification. Additionally, using abstract classes helped me define a
consistent interface across different implementations.

Conclusion
Working with PHP's OOP features in this project has been an enlightening experience. PHP provides powerful tools for building scalable and maintainable code structures, but it also requires a solid understanding 
of OOP principles to leverage these features effectively.  Using classes and inheritance improved my code organization and reusability, while traits allowed me to work around PHP's lack of multiple inheritance.
By following established naming conventions and leveraging magic methods, I was able to write clean, readable, and maintainable code.
In retrospect, understanding PHP's approach to OOP has given me a greater appreciation for its flexibility and power, as well as the importance of adhering to coding standards for maintainability and scalability.
From my experience, I found working with PHP much easier than Java for several reasons. First, PHP's syntax is simpler and less verbose. I could create a class and instantiate an object in just a few lines, 
whereas Java required more boilerplate code, like package declarations and explicit data type declarations. This made Java feel unnecessarily complicated, especially when I was just trying to get some code to work.
Another reason I preferred PHP was its dynamic typing. In PHP, I didn’t have to worry about declaring data types explicitly. I could assign a string to a variable and then later change it to an integer without any issues. In contrast, Java’s strict typing meant that I had to be precise about data types, which slowed me down when I was struggling to find a solution that worked. PHP’s flexibility allowed me to make quick changes and test them immediately, which was crucial when I was desperately trying to get my code to function as expected.
Finally, working with PHP in Visual Studio Code was a much smoother experience compared to Java. In VS Code, I could write, test, and debug PHP code directly without needing to switch environments. In contrast, 
while I also used VS Code for Java, I had to compile the code using the command shell. This added an extra step to the workflow, which became frustrating, especially when I was repeatedly trying to fix errors. 
Switching between VS Code and the command shell broke my focus and made the development process feel more cumbersome. With PHP, I could simply write and refresh to see the changes instantly, making the workflow 
much more efficient.  Overall, PHP’s simpler syntax, dynamic typing, and seamless integration with VS Code made it a more accessible and user-friendly language for me, especially when I was under pressure and 
needed working code fast.

References:

 PHP Documentation. (n.d.). Object Inheritance in PHP. PHP.net. Retrieved February 22, 2025, from https://www.php.net/manual/en/language.oop5.inheritance.php

 Simplilearn. (n.d.). Inheritance in PHP Tutorial. Simplilearn. Retrieved February 22, 2025, from https://www.simplilearn.com/tutorials/php-tutorial/inheritance-in-php

 Hossain, M. (n.d.). Inheritance in PHP with Example. Medium. Retrieved February 22, 2025, from https://mohasin-dev.medium.com/inheritance-in-php-with-example-4149f89e17a0

 GeeksforGeeks. (n.d.). Inheritance in PHP. GeeksforGeeks. Retrieved February 23, 2025, from https://www.geeksforgeeks.org/inheritance-in-php/

 W3Schools. (n.d.). PHP OOP Inheritance. W3Schools. Retrieved February 23, 2025, from https://www.w3schools.com/php/php_oop_inheritance.asp

Code:
<?php
// Enable error reporting for debugging
error_reporting(E_ALL);
ini_set('display_errors', 1);

// Define the Person class
class Person {
    // Class attributes (instance variables)
    public $firstName;
    public $lastName;
    public $age;

    // Constructor to initialize attributes
    public function __construct($firstName, $lastName, $age) {
        $this->firstName = $firstName;
        $this->lastName = $lastName;
        $this->age = $age;
    }

    // Function to get full name
    public function getFullName() {
        return $this->firstName . " " . $this->lastName;
    }

    // Function to display person details
    public function displayPersonInfo() {
        echo "Name: " . $this->getFullName() . "<br>";
        echo "Age: " . $this->age . "<br>";
    }
}

// Define the Student class that inherits from Person
class Student extends Person {
    // Additional attributes for the Student class
    public $studentID;
    public $major;

    // Constructor to initialize inherited and new attributes
    public function __construct($firstName, $lastName, $age, $studentID, $major) {
        // Call the parent constructor to initialize inherited attributes
        parent::__construct($firstName, $lastName, $age);
        $this->studentID = $studentID;
        $this->major = $major;
    }

    // New method for the Student class
    public function displayStudentInfo() {
        // Call the parent's method
        $this->displayPersonInfo();
        echo "Student ID: " . $this->studentID . "<br>";
        echo "Major: " . $this->major . "<br>";
    }
}

// Instantiate Person and Student objects
$person = new Person("Alice", "Brown", 45);
$student = new Student("Mark", "Taylor", 22, "S67890", "Mathematics");

// Display initial information
echo "<h3>Initial Information:</h3>";
$person->displayPersonInfo();
echo "<br>";
$student->displayStudentInfo();
echo "<br>";

// Modify instance variables
$person->firstName = "Alicia";
$student->major = "Physics";

// Display modified information
echo "<h3>After Modification:</h3>";
$person->displayPersonInfo();
echo "<br>";
$student->displayStudentInfo();
?>



<?php
// Include the Person class
require_once 'Person.php';

// Define the Student class that inherits from Person
class Student extends Person {
    // Additional attributes for the Student class
    public $studentID;
    public $major;

    // Constructor to initialize inherited and new attributes
    public function __construct($firstName, $lastName, $age, $studentID, $major) {
        // Call the parent constructor to initialize inherited attributes
        parent::__construct($firstName, $lastName, $age);
        $this->studentID = $studentID;
        $this->major = $major;
    }

    // New method for the Student class
    public function displayStudentInfo() {
        // Call the parent's method
        $this->displayPersonInfo();
        echo "Student ID: " . $this->studentID . "<br>";
        echo "Major: " . $this->major . "<br>";
    }
}
?>



 
<?php
// Define the Person class
class Person {
    // Class attributes (instance variables)
    public $firstName;
    public $lastName;
    public $age;

    // Constructor to initialize attributes
    public function __construct($firstName, $lastName, $age) {
        $this->firstName = $firstName;
        $this->lastName = $lastName;
        $this->age = $age;
    }

    // Function to get full name
    public function getFullName() {
        return $this->firstName . " " . $this->lastName;
    }

    // Function to display person details
    public function displayPersonInfo() {
        echo "Name: " . $this->getFullName() . "<br>";
        echo "Age: " . $this->age . "<br>";
    }
}

// Instantiate the Person object
$person = new Person("John", "Doe", 30);
$person->displayPersonInfo();
?>










